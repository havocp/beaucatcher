# Beaucatcher MongoDB reference (default) configuration

beaucatcher {
    mongo {
        # implementation of MongoDB protocol to use.
        # "java-driver" or "netty-channel"
        driver = "java-driver"

        # URI defining the default connection pool.
        # a Mongo URI in the usual format. It's an error if it
        # overlaps with other non-null settings below; for example
        # you can specify the username in the URI or in the separate
        # database.username setting but not both.
        uri = null

        # this section defines the default connection pool
        # (if you create a connection without specifying
        # any URI or config in code)
        connection {
            # array of hosts; each one is a replica set seed.
            hosts = [ "localhost:27017" ]

            # name of the replica set; optional, but if present
            # it will be verified before using the set
            # same as replicaSet in the URI
            replica-set = null

            # Timeout to pass to the TCP connect() call
            # same as connectTimeoutMS in the URI
            connect-timeout = 10s

            # sets SO_TIMEOUT on the socket(s); value is in milliseconds, or specify
            # units as in the HOCON specification.
            # socketTimeoutMS in the URI
            socket-timeout = 2s

            # sets SO_KEEPALIVE on the socket(s)
            socket-keep-alive = true

            # algorithm for deciding which server to read from
            # "primary" only read data from the current master in the replica set
            # "secondary" read data from non-masters (secondaries) if they seem to have lower pings
            # [ tag1: loc1, tag2: loc2 ] list of tags to read from, preferred ones first.
            #   falls back to any secondary or primary if necessary.
            # See https://jira.mongodb.org/browse/JAVA-428 (if anyone knows of
            # better docs than that bug, please send a patch)
            read-preference = primary

            # default "getLastError" options for collections
            # in this database. See http://www.http://www.mongodb.org/display/DOCS/getLastError+Command
            # "w=majority,j=true" is a good default for safety purposes.
            # "w=0,j=false" would be fastest and totally fire-and-forget with
            # no error checking.
            #
            # You can also put "last-error" sections in database or collection configs,
            # if present the most-specific wins (collection overrides database overrides
            # connection)
            last-error {
                # set to 0 to not use getLastError; set to a number to write to
                # that many servers before returning; set to "majority" to write
                # to the majority of the replica set before returning.
                w = "majority"

                # whether to wait for journal commit. for max safety
                j = true

                # how long to wait for the write before giving up and
                # replying anyway. null to have no timeout.
                wtimeout = null
            }

            # name of the default database to use if the code
            # does not specify. null for "error if not specified"
            # the options for the database would be set in a
            # "databases.<name>" section
            default-database-name = null
        }

        # the keys in the databases section are
        # database names, with settings for that
        # database name
        databases {
            # this doesn't do anything, unless you have a
            # database called 'default'; it's just here to
            # show which keys are available.
            default {
                # username to use for logging in to the database
                username = null

                # password to use for logging in to the database
                password = null

                # null means fall back to the last-error object defined
                # for the entire connection
                last-error = null
            }
        }

        # the keys in the collections section are collection names,
        # with settings for that collection
        collections {
            # this doesn't do anything, unless you have a
            # collection called 'default'; it's just here to
            # show which keys are available.
            default {
                # null means fall back to the last-error object defined
                # for the entire database or connection
                last-error = null
            }
        }
    }
}
